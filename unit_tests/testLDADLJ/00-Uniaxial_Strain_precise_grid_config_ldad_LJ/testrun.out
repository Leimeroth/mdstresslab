   
   ----------------------------------------------------------------------------
   
   M D S t r e s s L a b
   
   
   This code is distributed under the CDDL open source license
   
   Authors: N. C. Admal, Min Shi and E. B. Tadmor (University of Minnesota)
   
   Version 2.0.0 MPI
   
   For more information contact tadmor@umn.edu
   
   ----------------------------------------------------------------------------
   
   Number of processor(s) used: 1

 **Reading species data**
   Species on file:
     Ar          0.0039948100000000
   Total number of species in file = 1

 **Reading configuration data**
   Dimension        = 3
   Number of atoms  = 4000
   Reference sample size     =       52.9216036151418976      52.9216036151418976      52.9216036151418976
   Deformed sample size      =       52.9216036151418976      53.4508196512933225      52.9216036151418976
   PBC                       =               T              T              T
   Total number of species in the configuration file = 1
   Species list in configuration:
   Ar

 **Reading grid data**
   Define the grid based on coordinates First PK:     T
   Starting position First PK:       21.1686414460567605      21.1686414460567605      21.1686414460567605
   Ending position First PK:       26.4608018075709523      26.4608018075709523      26.4608018075709523
   Number of divs : x-dir first PK            = 4
                    y-dir first PK            = 4
                    z-dir first PK            = 4
   Write to grid file first PK                = grid_pk1.data
   Define the grid based on coordinates Cauchy:     T
   Starting position Cauchy:       21.1686414460567605      21.3803278605173261      21.1686414460567605
   Ending position Cauchy:       26.4608018075709523      26.7254098256466577      26.4608018075709523
   Number of divs : x-dir Cauchy              = 4
                    y-dir Cauchy              = 4
                    z-dir Cauchy              = 4
   Write to grid file Cauchy                  = grid_cauchy.data

 **Reading interatomic potential**
   Model name is: LJ_Smoothed_Bernardes_1958_Ar__MO_764178710049_001

 **Reading rigidity settings**
   Projection =          F

 **Reading stress settings**
   Calculating Hardy stress:     T
   Calculating Hardy stress directly on deformed configuration:     T
   Cauchy Hardy average domain: ldad,     T
   Using lattice-dependent averaging domain on deformed configuration:     T
   Cauchy Hardy vectors:
   1st vector:        5.2921603615141901       0.0000000000000000       0.0000000000000000
   2nd vector:        0.0000000000000000       5.3450819651293315       0.0000000000000000
   3rd vector:        0.0000000000000000       0.0000000000000000       5.2921603615141901
   Using ldad_trigonometry
   Using trigonometry weighting function for LDAD.
   Calculating Hardy stress:     T
   Calculating Hardy stress on reference configuration (First PK/engineering stress):     T
   First PK-Hardy average domain: ldad,     T
   First PK-Hardy vectors:
   1st vector:        5.2921603615141901       0.0000000000000000       0.0000000000000000
   2nd vector:        0.0000000000000000       5.2921603615141901       0.0000000000000000
   3rd vector:        0.0000000000000000       0.0000000000000000       5.2921603615141901
   Using ldad_trigonometry
   Using trigonometry weighting function for LDAD.
   Using MLS to push the first PK stress to Cauchy stress:     T
   Calculating pushed cauchy stress:     T
   Using shperical MLS-averaging domain for constructing displacement fields:     T
   Using sphere_cubic_spline for MLS weighting function.

 **Start calculating the stress tensor**
   Starting force calculation :
   Cutoff radius from model =        8.5000000000000000
   Turning off pbc
   Total number of atoms = 10976
   number of model routine names = 8
   Constructing atom neighbor list
   Building bins in this region MAX:       60.8598441575131872      61.4684425990873251      60.8598441575131872
   Building bins in this region MIN:      -10.5843207231283767     -10.6901639303586702     -10.5843207231283767
   nxbin: 4; dxbin:       17.8610412201603914
   nybin: 4; dybin:       18.0396516323614975
   nzbin: 4; dzbin:       17.8610412201603914
   nbin: 64
   Performance alert: # of Neighbors increased to 400
   Performance alert: # of Neighbors increased to 800
   max_pairs_per_atom: 554
   Allocating array size of total_neigh, which is the total # of neighbors =    2165600
   Neighbor List Construction Finish!

 **Calculating the Cauchy stress tensor**
   
   Looping over all bonds to calculate the Cauchy stress tensors.

 **Setting the Cauchy stress grid**
   Writing grid points to file grid_cauchy.data
   Number of grid points = 125
   Grid points set finished!
   Constructing grid neighbor list
   Building bins in this region MAX:       60.8598441575131872      61.4684425990873251      60.8598441575131872
   Building bins in this region MIN:      -10.5843207231283767     -10.6901639303586702     -10.5843207231283767
   nxbin: 2; dxbin:       35.7220824403207828
   nybin: 2; dybin:       36.0793032647229950
   nzbin: 2; dzbin:       35.7220824403207828
   nbin: 8
   Performance alert: Maximum # of Neighbors per grid increased to 800
   Performance alert: Maximum # of Neighbors per grid increased to 1600
   Performance alert: Maximum # of Neighbors per grid increased to 3200
   Performance alert: Maximum # of Neighbors per grid increased to 6400
   Grid Neighbor List Construction Finish!
   Grid Neighbor List Construction cost:        0.2266580000000000
   Dividing grid points. 1 processor(s) has(have) 125 grid points.
   Dividing grid points. 0 processor(s) has(have) 124 grid points.
   
   Looping over all bonds to calculate the Cauchy-Hardy stress tensors.
   Grid point Cauchy-Hardy: 100
   Grid point Cauchy-Hardy: 125

 **Writing Cauchy-Hardy stress tensor**
   
   Writing potential part of Cauchy-Hardy stress tensor (direct) to file hardy_cauchy_direct.str
   Writing kinetic part of Cauchy-Hardy stress tensor (direct) to file hardy_kin_cauchy_direct.str
   Calculating hardy Cauchy stress runs in       25.5241809999999987 s.

 **Calculating the first pk stress tensor**
   
   Looping over all bonds to calculate the first pk stress tensors.

 **Setting the first PK stress grid**
   Writing grid points to file grid_pk1.data
   Number of grid points = 125
   Grid points set finished!
   Constructing grid neighbor list
   Building bins in this region MAX:       60.8598441575131872      60.8598441575131872      60.8598441575131872
   Building bins in this region MIN:      -10.5843207231283767     -10.5843207231283767     -10.5843207231283767
   nxbin: 2; dxbin:       35.7220824403207828
   nybin: 2; dybin:       35.7220824403207828
   nzbin: 2; dzbin:       35.7220824403207828
   nbin: 8
   Performance alert: Maximum # of Neighbors per grid increased to 800
   Performance alert: Maximum # of Neighbors per grid increased to 1600
   Performance alert: Maximum # of Neighbors per grid increased to 3200
   Performance alert: Maximum # of Neighbors per grid increased to 6400
   Grid Neighbor List Construction Finish!
   Grid Neighbor List Construction cost:        0.2170050000000003
   Dividing grid points. 1 processor(s) has(have) 125 grid points.
   Dividing grid points. 0 processor(s) has(have) 124 grid points.
   
   Looping over all bonds to calculate the first pk-Hardy stress tensors.
   Grid point first pk-Hardy: 100
   Grid point first pk-Hardy: 125

 **Writing first pk-Hardy stress tensor**
   
   Writing potential part of first pk-Hardy stress tensor to file hardy_pk1.str
   Writing kinetic part of first pk-Hardy stress tensor to file hardy_kin_pk1.str
   Calculating tsai pk1 stress runs in       25.1513950000000008 s.

 
   Start calculating the deformation gradient tensors using MLS method.
   Constructing grid neighbor list
   Building bins in this region MAX:       60.8598441575131872      60.8598441575131872      60.8598441575131872
   Building bins in this region MIN:      -10.5843207231283767     -10.5843207231283767     -10.5843207231283767
   nxbin: 2; dxbin:       35.7220824403207828
   nybin: 2; dybin:       35.7220824403207828
   nzbin: 2; dzbin:       35.7220824403207828
   nbin: 8
   Performance alert: Maximum # of Neighbors per grid increased to 800
   Performance alert: Maximum # of Neighbors per grid increased to 1600
   Performance alert: Maximum # of Neighbors per grid increased to 3200
   Performance alert: Maximum # of Neighbors per grid increased to 6400
   Performance alert: Maximum # of Neighbors per grid increased to 12800
   Grid Neighbor List Construction Finish!
   Grid Neighbor List Construction cost:        0.2535310000000024
   Allocating the deformation gradient tensors.
   
   Looping over all atoms to calculate the deformation gradient tensors.
   Grid point deformation gradient tensors: 100
   Grid point deformation gradient tensors: 125

 
   Writing deformation gradient tensor to file hardy_F.str

 
   Writing grid points corresponding to deformed configuration to file gpt_i_pushed_f_MLS.data
   Construct deformation gradient calculation costs:        0.5245519999999999 s.

 
   Start calculating the Cauchy stress tensors using push forward method.
   Allocating the Cauchy-Hardy stress tensors.
   
   Looping over all tensors to calculate the pushed Cauchy-Hardy stress tensors.
   Grid point pushing: 100
   Grid point pushing: 125

 **Writing Cauchy-Hardy stress tensor**
   
   Writing potential part of Cauchy-Hardy stress tensor (pushed) to file hardy_cauchy_pushed.str
   Writing kinetic part of Cauchy-Hardy stress tensor (pushed) to file hardy_kin_cauchy_pushed.str
   Pushing Cauchy-Hardy stress tensors calculation costs:        0.0034399999999977 s.
   Stress computation finished!

 **Deallocating data**
   MDStressLab runs in       92.4250782540002547 s.
